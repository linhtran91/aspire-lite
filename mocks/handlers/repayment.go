// Code generated by MockGen. DO NOT EDIT.
// Source: internals/handlers/repayment.go
//
// Generated by this command:
//
//	mockgen -source=internals/handlers/repayment.go -destination=mocks/handlers/repayment.go
//

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	models "aspire-lite/internals/models"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepaymentRepository is a mock of RepaymentRepository interface.
type MockRepaymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepaymentRepositoryMockRecorder
}

// MockRepaymentRepositoryMockRecorder is the mock recorder for MockRepaymentRepository.
type MockRepaymentRepositoryMockRecorder struct {
	mock *MockRepaymentRepository
}

// NewMockRepaymentRepository creates a new mock instance.
func NewMockRepaymentRepository(ctrl *gomock.Controller) *MockRepaymentRepository {
	mock := &MockRepaymentRepository{ctrl: ctrl}
	mock.recorder = &MockRepaymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepaymentRepository) EXPECT() *MockRepaymentRepositoryMockRecorder {
	return m.recorder
}

// CountUnpaidRepayment mocks base method.
func (m *MockRepaymentRepository) CountUnpaidRepayment(ctx context.Context, loanID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUnpaidRepayment", ctx, loanID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUnpaidRepayment indicates an expected call of CountUnpaidRepayment.
func (mr *MockRepaymentRepositoryMockRecorder) CountUnpaidRepayment(ctx, loanID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUnpaidRepayment", reflect.TypeOf((*MockRepaymentRepository)(nil).CountUnpaidRepayment), ctx, loanID)
}

// GetByID mocks base method.
func (m *MockRepaymentRepository) GetByID(ctx context.Context, id string) (*models.Repayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Repayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepaymentRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepaymentRepository)(nil).GetByID), ctx, id)
}

// SubmitRepayment mocks base method.
func (m *MockRepaymentRepository) SubmitRepayment(ctx context.Context, repayment *models.Repayment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitRepayment", ctx, repayment)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitRepayment indicates an expected call of SubmitRepayment.
func (mr *MockRepaymentRepositoryMockRecorder) SubmitRepayment(ctx, repayment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitRepayment", reflect.TypeOf((*MockRepaymentRepository)(nil).SubmitRepayment), ctx, repayment)
}
