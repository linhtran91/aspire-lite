// Code generated by MockGen. DO NOT EDIT.
// Source: internals/handlers/loan.go
//
// Generated by this command:
//
//	mockgen -source=internals/handlers/loan.go -destination=mocks/handlers/loan.go
//

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	models "aspire-lite/internals/models"
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockLoanRepository is a mock of LoanRepository interface.
type MockLoanRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLoanRepositoryMockRecorder
}

// MockLoanRepositoryMockRecorder is the mock recorder for MockLoanRepository.
type MockLoanRepositoryMockRecorder struct {
	mock *MockLoanRepository
}

// NewMockLoanRepository creates a new mock instance.
func NewMockLoanRepository(ctrl *gomock.Controller) *MockLoanRepository {
	mock := &MockLoanRepository{ctrl: ctrl}
	mock.recorder = &MockLoanRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoanRepository) EXPECT() *MockLoanRepositoryMockRecorder {
	return m.recorder
}

// Approve mocks base method.
func (m *MockLoanRepository) Approve(ctx context.Context, loanID int64, at time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Approve", ctx, loanID, at)
	ret0, _ := ret[0].(error)
	return ret0
}

// Approve indicates an expected call of Approve.
func (mr *MockLoanRepositoryMockRecorder) Approve(ctx, loanID, at any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Approve", reflect.TypeOf((*MockLoanRepository)(nil).Approve), ctx, loanID, at)
}

// Create mocks base method.
func (m *MockLoanRepository) Create(ctx context.Context, loan *models.Loan, repayments []*models.Repayment) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, loan, repayments)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLoanRepositoryMockRecorder) Create(ctx, loan, repayments any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLoanRepository)(nil).Create), ctx, loan, repayments)
}

// UpdateStatus mocks base method.
func (m *MockLoanRepository) UpdateStatus(ctx context.Context, loanID int64, at time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, loanID, at)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockLoanRepositoryMockRecorder) UpdateStatus(ctx, loanID, at any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockLoanRepository)(nil).UpdateStatus), ctx, loanID, at)
}

// View mocks base method.
func (m *MockLoanRepository) View(ctx context.Context, customerID int64, limit, offset int) ([]*models.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "View", ctx, customerID, limit, offset)
	ret0, _ := ret[0].([]*models.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// View indicates an expected call of View.
func (mr *MockLoanRepositoryMockRecorder) View(ctx, customerID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "View", reflect.TypeOf((*MockLoanRepository)(nil).View), ctx, customerID, limit, offset)
}

// MockTokenDecoder is a mock of TokenDecoder interface.
type MockTokenDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockTokenDecoderMockRecorder
}

// MockTokenDecoderMockRecorder is the mock recorder for MockTokenDecoder.
type MockTokenDecoderMockRecorder struct {
	mock *MockTokenDecoder
}

// NewMockTokenDecoder creates a new mock instance.
func NewMockTokenDecoder(ctrl *gomock.Controller) *MockTokenDecoder {
	mock := &MockTokenDecoder{ctrl: ctrl}
	mock.recorder = &MockTokenDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenDecoder) EXPECT() *MockTokenDecoderMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockTokenDecoder) Decode(tokenString string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", tokenString)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockTokenDecoderMockRecorder) Decode(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockTokenDecoder)(nil).Decode), tokenString)
}
