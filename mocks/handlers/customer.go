// Code generated by MockGen. DO NOT EDIT.
// Source: internals/handlers/customer.go
//
// Generated by this command:
//
//	mockgen -source=internals/handlers/customer.go -destination=mocks/handlers/customer.go
//

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	models "aspire-lite/internals/models"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCustomerRepository is a mock of CustomerRepository interface.
type MockCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryMockRecorder
}

// MockCustomerRepositoryMockRecorder is the mock recorder for MockCustomerRepository.
type MockCustomerRepositoryMockRecorder struct {
	mock *MockCustomerRepository
}

// NewMockCustomerRepository creates a new mock instance.
func NewMockCustomerRepository(ctrl *gomock.Controller) *MockCustomerRepository {
	mock := &MockCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRepository) EXPECT() *MockCustomerRepositoryMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method.
func (m *MockCustomerRepository) GetUserByID(ctx context.Context, id int64) (*models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockCustomerRepositoryMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockCustomerRepository)(nil).GetUserByID), ctx, id)
}

// GetUserCredential mocks base method.
func (m *MockCustomerRepository) GetUserCredential(ctx context.Context, username string) (*models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCredential", ctx, username)
	ret0, _ := ret[0].(*models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCredential indicates an expected call of GetUserCredential.
func (mr *MockCustomerRepositoryMockRecorder) GetUserCredential(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCredential", reflect.TypeOf((*MockCustomerRepository)(nil).GetUserCredential), ctx, username)
}

// MockTokenEncoder is a mock of TokenEncoder interface.
type MockTokenEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockTokenEncoderMockRecorder
}

// MockTokenEncoderMockRecorder is the mock recorder for MockTokenEncoder.
type MockTokenEncoderMockRecorder struct {
	mock *MockTokenEncoder
}

// NewMockTokenEncoder creates a new mock instance.
func NewMockTokenEncoder(ctrl *gomock.Controller) *MockTokenEncoder {
	mock := &MockTokenEncoder{ctrl: ctrl}
	mock.recorder = &MockTokenEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenEncoder) EXPECT() *MockTokenEncoderMockRecorder {
	return m.recorder
}

// Encode mocks base method.
func (m *MockTokenEncoder) Encode(customerID int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", customerID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockTokenEncoderMockRecorder) Encode(customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockTokenEncoder)(nil).Encode), customerID)
}
